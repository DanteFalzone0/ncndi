<ws> ::= " " <opt-ws> | "\n" <opt-ws> | "\r" <opt-ws> | "\t" <opt-ws>

<opt-ws> ::= <ws> | ""

<program> ::= <function-list> <program> | "start" <opt-ws> "{" <statement-list> "}" <opt-ws> "end"

<statement-list> ::= <statement> | <statement> <statement-list>

<function-list> ::= <function-decl> | <function-decl> <function-list>

<parameter-list> ::= <opt-ws> | <variable-decl> | <variable-decl> "," <opt-ws> <parameter-list>

<function-decl> ::= "funct" <ws> <identifier> <opt-ws> "(" <parameter-list> ")"
                    <opt-ws> [<type-identifier>] <opt-ws> "{" <statement-list> "}"

<function-call> ::= <identifier> <opt-ws> "(" <argument-list> ")"

<argument-list> ::= <opt-ws> | <expression> | <expression> "," <opt-ws> <argument-list>

<statement> ::= <assignment-statement> ";"
              | <variable-decl> ";"
              | <reassignment-statement> ";"
              | <print-statement> ";"
              | <function-call> ";"
              | <if-statement>
              | <while-loop>
              | <for-loop>
              | <return-statement> ";"
              | <opt-ws>
              | <statement> ";"
              | <ws> <statement>
              | <statement> <ws>

<return-statement> ::= "return" <ws> <expression>

<while-loop> ::= "while" <ws> <expression> <opt-ws> "{" <statement-list> "}" 

<for-loop> ::= "for" <statement> ";" [<expression>] ";" <statement> "{" <statement-list> "}"

<if-statement> ::= "if" <ws> <expression> <opt-ws> "{" <statement-list> "}" [<else-statement>]

<else-statement> ::= "else" <opt-ws> "{" <statement-list> "}" | "else" <if-statement>

<print-statement> ::= "print" <ws> <expression>

<assignment-statement> ::= <type-identifier> <ws> <identifier> <opt-ws> "=" <opt-ws> <expression>

<reassignment-statement> ::= <identifier> <opt-ws> <assignment-operator> <opt-ws> <expression>

<assignment-operator> ::= "+=" | "-=" | "*=" | "/=" | "="

<variable-decl> ::= <type-identifier> <ws> <identifier>

<relational> ::= ">" | "==" | "<" | "<=" | ">=" | "!="

<logical> ::= "&&" | "||" | "<>"

<expression> ::= <comparison> [<opt-ws> <logical> <opt-ws> <comparison>]+

<comparison> ::= ["!" <opt-ws>] <math-expression> [<opt-ws> <relational> <opt-ws> <math-expression>]+

<math-expression> ::= <term> [<opt-ws> ("+" | "-") <opt-ws> <term>]+

<term> ::= <factor> [<opt-ws> ("*" | "/") <opt-ws> <factor>]+

<factor> ::= "+" <opt-ws> <factor>
           | "-" <opt-ws> <factor>
           | "!" <opt-ws> <expression>
           | <integer>
           | <float>
           | <string-literal>
           | "(" <opt-ws> <expression> <opt-ws> ")"
           | <identifier>
           | <function-call>
           | <if-statement>

<type-identifier> ::= "float" | "int" | "string"
